import urllib
from pathlib import Path
from ReadConfig import ReadConfig
import json
import os
import sys
import re

current_dir = os.getcwd()
utilitydir = current_dir+"/utility"

sys.path.insert(1, utilitydir)

from InputDataReader import InputDataReader

class ParamSpecificTest(object):
	"""docstring for ParamSpecificTest"""
	FilePath = os.getcwd()+"/config/TestInput.csv"
	def __init__(self, encodedUrl):
		super(ParamSpecificTest, self).__init__()
		self.__encodedUrl = encodedUrl
		self.__decodedUrl = urllib.parse.unquote(self.__encodedUrl)

		self.__InputObj = None
		self.__input_req_url = None
		self.__tcid = None

		self.__TestCaseName = ""

		self.__expected_url_param_list=[]
		self.__expected_cust_param_list=[]

		self.__missing_url_param_list=[]
		self.__missing_cust_param_list=[]

		self.__url_param_mis_match:bool = False
		self.__cust_param_mis_match:bool = False


	def CheckAnyUrlParamMissing(self):
		return self.__url_param_mis_match

	def CheckAnyCustParamMissing(self):
		return self.__cust_param_mis_match

	def GetMissingUrlParamList(self):
		return self.__missing_url_param_list

	def GetMissingCustParamList(self):
		return self.__missing_cust_param_list

	def GetTCIDFromOutPutUrl(self):
		try:

			custParams = self.__encodedUrl.split('cust_params')[1]
			custParams=custParams.replace('cust_params=', '')
			params = custParams.split("%26")
			tcid=""
			for item in params:
				if 'TCID' in item:
					tcid = item.split("%3D")[1]
					break
			self.__tcid=tcid.strip()
			return self.__tcid
		except:
			print("TcID not found")

	def GetInputUrl(self):
		self.__tcid = self.GetTCIDFromOutPutUrl()
		self.__InputObj = InputDataReader(self.__tcid, ParamSpecificTest.FilePath)
		self.__input_req_url = self.__InputObj.ReadInputReq()
		return self.__input_req_url



	def GetExpectedUrlParams(self):
		self.__expected_url_param_list = self.__InputObj.GetExpectedUrlColum()

	def GetExpectedCustParams(self):
		self.__expected_cust_param_list = self.__InputObj.GetExpectedCustColum()

	def GetTestCaseName(self):
		try:
			custParams = self.__encodedUrl.split('cust_params=')[1]
			custParams=custParams.replace('cust_params=', '')
			params = custParams.split("%26")
			#print(params)
			tc_name=""
			for item in params:
				if 'TestCaseName' in item:
					tc_name = item.split("%3D")[1]
					break
			self.__TestCaseName = tc_name
			return self.__TestCaseName.strip()
		except:
			print("TestCaseName not found")


	def isMatchWithUrlParam(self, paramItem:str, urlStr:str):
		arr = urlStr.split('&')
		for item in arr:
			if item.strip()==paramItem:
				return True
		return False


	def isMatchWithCustParam(self, paramItem:str, custStr:str):
		arr = custStr.split('%26')

		if 'specialChar' in self.__TestCaseName:
			paramItem = urllib.parse.unquote(paramItem)
			for i in range(len(arr)):
				arr[i]= urllib.parse.unquote(arr[i])#base64.b64decode(arr[i].strip()) # arr[i].encode('base64','strict')#'base64','strict'
				#print(arr[i])

		for item in arr:
			if item.strip()==paramItem:
				return True
		return False

	def isUrlParamExcluded(self, paramItem:str, urlStr:str):
		arr = urlStr.split('&')
		for item in arr:
			if item.strip()==paramItem:
				return False
		return True


	def isCustParamExcluded(self, paramItem:str, custStr:str):
		arr = custStr.split('%26')
		for item in arr:
			if item.strip()==paramItem:
				return False

		return True


	def CheckParamSpecificTest(self):
		self.GetTestCaseName()
		#if 'AutoGenerated' in self.__TestCaseName:
		#	return "Not Applicable"

		self.GetTCIDFromOutPutUrl()
		#print(self.__tcid)
		self.__InputObj = InputDataReader(self.__tcid, ParamSpecificTest.FilePath)
		self.GetExpectedUrlParams()
		self.GetExpectedCustParams()

		url_part_in_output_url = self.__encodedUrl.split('?')[1].split('cust_params=')[0]
		if self.__expected_url_param_list!=None:
			for item in self.__expected_url_param_list:
				if '<EXCLUDE>' not in item:
					res = self.isMatchWithUrlParam(item.strip(), url_part_in_output_url)
					if res==False:
						self.__url_param_mis_match = True
						self.__missing_url_param_list.append(item)
				else:
					res = self.isUrlParamExcluded(item.strip(), url_part_in_output_url)
					if res==False:
						self.__url_param_mis_match = True
						self.__missing_url_param_list.append(item)

		cust_param_part_in_output_url = self.__encodedUrl.split('?')[1].split('cust_params=')[1]

		if self.__expected_cust_param_list!=None:
			for item in self.__expected_cust_param_list:
				if '<EXCLUDE>' not in item:
					res = self.isMatchWithCustParam(item.strip(), cust_param_part_in_output_url)
					if res == False:
						self.__cust_param_mis_match = True
						self.__missing_cust_param_list.append(item)
				else:
					res = self.isCustParamExcluded(item.strip(), cust_param_part_in_output_url)
					if res == False:
						self.__cust_param_mis_match = True
						self.__missing_cust_param_list.append(item)
		#if self.__url_param_mis_match==True:
		#	print(f"TCID: {self.__tcid} missing url param list:\n{self.__missing_url_param_list}")
		#else:
		#	print(f"TCID: {self.__tcid} : pass url test")

		#if self.__cust_param_mis_match==True:
		#	print(f"TCID: {self.__tcid} missing cust parma list:\n{self.__missing_cust_param_list}")
		#else:
		#	print(f"TCID: {self.__tcid} : pass cust test")



def __test():
	with open('Response.json', 'r') as f:
		data=json.load(f)
		hits=data['rawResponse']['hits']['hits']
		length=len(hits)
		counter=0
		for item in hits:
			url = item['_source']['url']
			st = ParamSpecificTest(url)
			#print(f"tcid={length-counter}")
			st.CheckParamSpecificTest()
			counter+=1
		#print(len(hits))

#__test()